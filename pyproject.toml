[project]
name = "crewai-platform"
version = "0.1.0"
description = "A comprehensive, extensible CrewAI platform for building AI agent workflows and integrations"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CrewAI Platform Contributors", email = "contributors@crewai-platform.com"}
]
keywords = ["ai", "agents", "crewai", "workflows", "automation", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    # Core CrewAI dependencies
    "crewai>=0.121.1",
    "crewai[tools]",
    
    # Web framework and API
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    
    # Database and storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    
    # Monitoring and logging
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
    
    # Data processing
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    "openpyxl>=3.1.0",
    
    # HTTP and API clients
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    
    # Security
    "cryptography>=41.0.0",
    "python-jose>=3.3.0",
    "passlib>=1.7.0",
    
    # Testing (dev dependencies)
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

integrations = [
    # Social Media
    "tweepy>=4.14.0",
    "python-linkedin-v2>=2.0.0",
    
    # CRM Systems
    "simple-salesforce>=1.12.0",
    "hubspot-api-client>=8.0.0",
    
    # Cloud Services
    "boto3>=1.34.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
    
    # Communication
    "slack-sdk>=3.26.0",
    "discord.py>=2.3.0",
    "sendgrid>=6.11.0",
]

all = [
    "crewai-platform[dev,docs,integrations]"
]

[project.urls]
Homepage = "https://github.com/yourusername/crewai-platform"
Documentation = "https://crewai-platform.readthedocs.io"
Repository = "https://github.com/yourusername/crewai-platform"
"Bug Tracker" = "https://github.com/yourusername/crewai-platform/issues"
Changelog = "https://github.com/yourusername/crewai-platform/blob/main/CHANGELOG.md"

[project.scripts]
# Core workflows
ai-research = "src.workflows.research.ai_development.main:run"
blog-post = "src.workflows.content_creation.blog_post_workflow.main:run"

# Platform utilities
crewai-platform = "src.core.cli:main"
platform-train = "src.core.cli:train_workflow"
platform-test = "src.core.cli:test_workflow"
platform-deploy = "src.core.cli:deploy"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 